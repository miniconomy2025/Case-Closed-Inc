name: Integration Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run tests on"
        required: true
        default: "feature/comprehensive-integration-testing"
        type: string
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run tests on"
        required: true
        default: "feature/comprehensive-integration-testing"
        type: string
  push:
    branches:
      - "feature/comprehensive-integration-testing"
    paths:
      - "server/**"
      - "mock/**"
      - ".github/workflows/test-pr-checks.yml"

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    services:
      # PostgreSQL test database
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: case_closed_test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install mock service dependencies
        run: |
          cd mock/commercial-bank && npm ci
          cd ../hand && npm ci
          cd ../bulk-logistics && npm ci

      - name: Start mock services in background
        run: |
          cd mock/commercial-bank && node index.js &
          cd mock/hand && node index.js &
          cd mock/bulk-logistics && node index.js &
          sleep 5 # Give services time to start

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run integration tests
        working-directory: ./server
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5433
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: case_closed_test_db
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password
          TEST_DB_NAME: case_closed_test_db
        run: npm run test:integration -- --detectOpenHandles --forceExit

      # - name: Upload test results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #       name: integration-test-results
      #       path: server/coverage/
      #       retention-days: 7

  aws-sqs-tests:
    name: Run AWS SQS Integration Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    services:
      # PostgreSQL test database
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: case_closed_test_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # LocalStack for AWS service emulation
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: sqs,s3,rds,iam,ssm
          DEBUG: 1
          DATA_DIR: /var/lib/localstack/data
          DOCKER_HOST: unix:///var/run/docker.sock
          HOST_TMP_FOLDER: /var/lib/localstack
          PERSISTENCE: 1
          LAMBDA_EXECUTOR: docker
          SQS_ENDPOINT_STRATEGY: domain
          SQS_DISABLE_CLOUDWATCH_METRICS: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for LocalStack
        run: |
          until curl -f http://localhost:4566/_localstack/health; do
            echo "Waiting for LocalStack..."
            sleep 5
          done
          echo "LocalStack is ready!"

      - name: Run AWS SQS integration tests
        working-directory: ./server
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5433
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: case_closed_test_db
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password
          TEST_DB_NAME: case_closed_test_db
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_REGION: us-east-1
        run: npm run test:sqs -- --detectOpenHandles --forceExit

      - name: Upload SQS test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aws-sqs-test-results
          path: server/coverage/
          retention-days: 7

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run unit tests
        working-directory: ./server
        run: npm run test:unit

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: server/coverage/
          retention-days: 7
