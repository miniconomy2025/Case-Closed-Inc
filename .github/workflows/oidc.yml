name: Deployment Pipeline
env:
  AWS_REGION: af-south-1

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform/infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_ip)" >> $GITHUB_OUTPUT

  deploy-api:
    name: Build & Deploy to EC2
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: ./server

    steps:
      # === Code Checkout ===
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === Setup Node.js ===
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'


      - name: Fetch Parameters
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSM Parameters + TF Outputs
        run: |
          echo "POSTGRES_USER=$(aws ssm get-parameter --name '/db_config/db_username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_PASS=$(aws ssm get-parameter --name '/db_config/db_password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          # Strip port from Terraform output
          RAW_DB_HOST="${{ needs.terraform.outputs.dbhost }}"
          CLEAN_DB_HOST=$(echo "$RAW_DB_HOST" | cut -d':' -f1)
          echo "POSTGRES_HOST=$CLEAN_DB_HOST" >> $GITHUB_ENV
          EC2_HOST="${{ needs.terraform.outputs.ec2host }}"
          echo "API_HOST=$EC2_HOST" >> $GITHUB_ENV
          # GET SSL Certs from SSM
          aws ssm get-parameter --name "/ssl/crt" --query "Parameter.Value" --output text > ./casesupplier_cert.crt
          aws ssm get-parameter --name "/ssl/privkey_pem" --query "Parameter.Value" --output text > ./casesupplier_key.pem
      - name: Check SSL cert files exist
        run: |
          if [[ -f "./casesupplier_cert.crt" && -f "./casesupplier_key.pem" ]]; then
            echo "SSL cert files found."
          else
            echo "ERROR: SSL cert files not found!"
            exit 1
          fi
      # ===  Upload SSL Certs to EC2 ===
      - name: Upload SSL Certs to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            ./casesupplier_cert.crt
            ./casesupplier_key.pem
          target: /etc/ssl/casesupplier/

      - name: Configure SSL-enabled Nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Update Nginx config with SSL
            sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
              server {
                  listen 80;
                  server_name _;
                  return 301 https://$host$request_uri;
              }

              server {
                  listen 443 ssl;
                  server_name _;

                  ssl_certificate /etc/ssl/casesupplier/casesupplier_cert.crt;
                  ssl_certificate_key /etc/ssl/casesupplier/casesupplier_key.pem;

              location / {
                      proxy_pass http://localhost:3000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host $host;
                      proxy_cache_bypass $http_upgrade;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            NGINX_CONF

            # Test & reload
            sudo nginx -t && sudo systemctl reload nginx
      # === Install Dependencies ===
      - name: Install Root Dependencies
        run: npm install

      # === Build Project ===
      - name: Build Root App
        run: npm run build

      # === Package Deployment Artifacts ===
      - name: Create Deployment Package
        run: |
          mkdir -p ../build-server
          cp -r ./dist ../build-server/
          cp ./package.json ./package-lock.json ../build-server/
          tar -czf ../deploy.tar.gz -C .. build-server
          ls -la ../build-server
          rm -rf ../build-server
          
      # === Transfer Package to EC2 ===
      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy.tar.gz"
          target: "/home/ec2-user/"

      # === Deploy on EC2 ===
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASS, POSTGRES_HOST, API_HOST
          port: 22
          script: |
            set -e

            DEPLOY_DIR="/home/ec2-user/case-supplier-app"
            PACKAGE="/home/ec2-user/deploy.tar.gz"

            # Prepare deployment directory
            rm -rf $DEPLOY_DIR
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            # Extract package and clean up
            tar -xzf $PACKAGE
            rm -f $PACKAGE

            # Install production dependencies
            cd build-server
            npm i

            cat <<EOF > dist/.env
            DB_USER=$POSTGRES_USER
            DB_PASSWORD=$POSTGRES_PASS
            DB_HOST=$POSTGRES_HOST
            DB_NAME=casesupplierdb
            DB_PORT=5432
            ENV=production
            API_PORT=3000
            API_HOST=$API_HOST
            EOF

            # Restart the app with PM2
            pm2 stop case-supplier-app || true
            pm2 delete case-supplier-app || true
            pm2 start server.js --name "case-supplier-app" --cwd dist

            # Save PM2 process list and enable on reboot and reload nginx
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
            sudo systemctl reload nginx
