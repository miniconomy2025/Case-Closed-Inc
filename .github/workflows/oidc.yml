name: Deployment Pipeline

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

  deploy:
    name: Build & Deploy to EC2
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # === Code Checkout ===
      - name: Checkout Repository
        uses: actions/checkout@v4

      # === Setup Node.js ===
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'


      - name: Fetch Parameters
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSM Parameters
        run: |
          echo "POSTGRES_USER=$(aws ssm get-parameter --name '/db_config/db_username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_PASS=$(aws ssm get-parameter --name '/db_config/db_password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_HOST=$(aws ssm get-parameter --name '/db_config/db_host' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_DBNAME=$(aws ssm get-parameter --name '/db_config/db_name' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
      # === Install Dependencies ===
      - name: Install Root Dependencies
        run: npm install

      - name: Install Client Dependencies
        working-directory: ./client
        run: npm install

      # === Build Project ===
      - name: Build Root App
        run: npm run build

      # === Package Deployment Artifacts ===
      - name: Create Deployment Package
        run: |
          mkdir -p server
          cp -r dist server/
          mkdir -p server/client 
          cp -r client/dist server/client/dist
          cp package.json package-lock.json server/
          tar -czf deploy.tar.gz server
          rm -rf server

      # === Transfer Package to EC2 ===
      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy.tar.gz"
          target: "/home/ec2-user/"

      # === Deploy on EC2 ===
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASS,POSTGRES_HOST,POSTGRES_DBNAME
          port: 22
          script: |
            set -e

            DEPLOY_DIR="/home/ec2-user/case-supplier-app"
            PACKAGE="/home/ec2-user/deploy.tar.gz"

            # Prepare deployment directory
            rm -rf $DEPLOY_DIR
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR

            # Extract package and clean up
            tar -xzf $PACKAGE
            rm -f $PACKAGE

            # Install production dependencies
            cd server
            npm i

            cat <<EOF > dist/.env
            DB_USER=$POSTGRES_USER
            DB_PASS=$POSTGRES_PASS
            DB_HOST=$POSTGRES_HOST
            DB_NAME=$POSTGRES_DBNAME
            ENV=production
            PORT=3000
            EOF

            # Restart the app with PM2
            pm2 stop case-supplier-app || true
            pm2 delete case-supplier-app || true
            pm2 start server.js --name "case-supplier-app" --cwd dist

            # Save PM2 process list and enable on reboot
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true

  flyway:
    name: Flyway Migrations
    runs-on: ubuntu-latest
    needs: [terraform, deploy]
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Fetch parameters
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSM Parameters
        run: |
          echo "POSTGRES_USER=$(aws ssm get-parameter --name '/db_config/db_username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_PASS=$(aws ssm get-parameter --name '/db_config/db_password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_HOST=$(aws ssm get-parameter --name '/db_config/db_host' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
                       
      - name: Run Flyway Migrations
        run: |
          docker run --rm --volume ${{ github.workspace }}/flyway/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://$POSTGRES_HOST/case_closed_db" -user="$POSTGRES_USER" -password="$POSTGRES_PASS" migrate
