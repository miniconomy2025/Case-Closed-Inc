name: Deployment Pipeline
env:
  AWS_REGION: af-south-1

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform/infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_ip)" >> $GITHUB_OUTPUT

  # deploy-api:
  #   name: Build & Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   defaults:
  #     run:
  #       working-directory: ./server

  #   steps:
  #     # === Code Checkout ===
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     # === Setup Node.js ===
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22'
  #         cache: 'npm'


  #     - name: Fetch Parameters
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Get SSM Parameters + TF Outputs
  #       run: |
  #         echo "POSTGRES_USER=$(aws ssm get-parameter --name '/db_config/db_username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
  #         echo "POSTGRES_PASS=$(aws ssm get-parameter --name '/db_config/db_password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
  #         echo "POSTGRES_HOST=${{ needs.terraform.outputs.dbhost }}" >> $GITHUB_ENV
          
  #     # === Install Dependencies ===
  #     - name: Install Root Dependencies
  #       run: npm install

  #     # === Build Project ===
  #     - name: Build Root App
  #       run: npm run build

  #     # === Package Deployment Artifacts ===
  #     - name: Create Deployment Package
  #       run: |
  #         mkdir -p server
  #         cp -r dist server/
  #         cp package.json package-lock.json server/
  #         tar -czf deploy.tar.gz server
  #         rm -rf server

  #     # === Transfer Package to EC2 ===
  #     - name: Copy Files to EC2
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ needs.terraform.outputs.ec2host }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         port: 22
  #         source: "deploy.tar.gz"
  #         target: "/home/ec2-user/"

  #     # === Deploy on EC2 ===
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ needs.terraform.outputs.ec2host }}
  #         username: ec2-user
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         envs: POSTGRES_USER,POSTGRES_PASS, POSTGRES_HOST
  #         port: 22
  #         script: |
  #           set -e

  #           DEPLOY_DIR="/home/ec2-user/case-supplier-app"
  #           PACKAGE="/home/ec2-user/deploy.tar.gz"

  #           # Prepare deployment directory
  #           rm -rf $DEPLOY_DIR
  #           mkdir -p $DEPLOY_DIR
  #           cd $DEPLOY_DIR

  #           # Extract package and clean up
  #           tar -xzf $PACKAGE
  #           rm -f $PACKAGE

  #           # Install production dependencies
  #           cd server
  #           npm i

  #           cat <<EOF > dist/.env
  #           DB_USER=$POSTGRES_USER
  #           DB_PASS=$POSTGRES_PASS
  #           DB_HOST=$POSTGRES_HOST
  #           DB_NAME=casesupplierdb
  #           DB_PORT=5432
  #           ENV=production
  #           PORT=3000
  #           EOF

  #           # Restart the app with PM2
  #           pm2 stop case-supplier-app || true
  #           pm2 delete case-supplier-app || true
  #           pm2 start server.js --name "case-supplier-app" --cwd dist

  #           # Save PM2 process list and enable on reboot
  #           pm2 save
  #           sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
