name: "Deployment pipeline"
env:
  AWS_REGION: af-south-1

on:
  workflow_dispatch:

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::123456789:role/github-role # TODO: Replace with actual role
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for backend
        run: |
          BUCKET_NAME="case-supplier-bucket-tf-state"
          REGION="${{ env.AWS_REGION }}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          else
            echo "Bucket already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=case-supplier-bucket-tf-state" -backend-config="key=terraformstate/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_host)" >> $GITHUB_OUTPUT

  deploy-api:
    name: Deploy API to EC2
    permissions:
      id-token: write
      contents: read
    needs: 
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::123456789:role/github-role # TODO: Replace with actual role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Set env variables
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            echo "Exporting environment variables"
            echo "DB_USER=${{ env.POSTGRES_USER }}" | sudo tee -a /etc/environment
            echo "DB_PASSWORD=${{ env.POSTGRES_PASS }}" | sudo tee -a /etc/environment
          '

      - name: Copy source code
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem -r ./server "ubuntu@$EC2_HOST:~/api"

      - name: Install & start app
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            cd ~/api &&
            npm install &&
            if pm2 list | grep -q "case-supplier-api"; then
              pm2 delete case-supplier-api;
            fi &&
            pm2 start npm --name case-supplier-api -- start
          '

  issue-certificates:
    needs:
      - deploy-api
      - terraform
    permissions:
      id-token: write
      contents: read
    name: Issue Certificates
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::123456789:role/github-role # TODO: Replace with actual role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Setup nginx proxy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'
          sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
          server {
              listen 80;
              server_name bbd-grad-project.co.za www.bbd-grad-project.co.za;

              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }

              location /api/ {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_CONF
          EOF

      - name: Verify and Reload nginx
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            sudo nginx -t && sudo systemctl reload nginx
          '

      - name: Certbot
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            sudo apt install certbot python3-certbot-nginx -y &&
            sudo certbot --nginx -d bbd-grad-project.co.za -d www.bbd-grad-project.co.za --non-interactive --agree-tos --email liam.barkley@bbd.co.za
          '