name: Deployment Pipeline - Backend
env:
  AWS_REGION: af-south-1

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform/infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_ip)" >> $GITHUB_OUTPUT

  setup-nginx:
    name: Setup Node.js, Nginx & SSL
    runs-on: ubuntu-latest
    needs: terraform
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Node.js, PM2, Nginx & Certbot
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            echo "=== Updating system ==="
            sudo dnf update -y

            echo "=== Installing Node.js 22 ==="
            curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
            sudo dnf install -y nodejs
            node -v
            npm -v

            echo "=== Installing PM2 ==="
            sudo npm install -g pm2

            echo "=== Installing Nginx and Certbot ==="
            sudo dnf install -y nginx certbot python3-certbot-nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx

            echo "=== Configuring Nginx for API ==="
            sudo tee /etc/nginx/conf.d/casesupplier.conf > /dev/null <<'NGINX_CONF'
            server {
                listen 80;
                server_name bbd-grad-program-2025.online www.bbd-grad-program-2025.online;

                location /.well-known/acme-challenge/ {
                    root /var/www/html;
                }

                location /api/ {
                  proxy_pass http://localhost:3000/api/; 
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                }
            }

            server {
                listen 444 ssl;
                server_name bbd-grad-program-2025.online www.bbd-grad-program-2025.online;

                location / {
                    limit_except GET OPTIONS {
                        deny all;
                    }

                    if ($request_method = OPTIONS) {
                        return 204;
                    }

                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;

                    add_header 'Access-Control-Allow-Origin' '*' always;
                    add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
                    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
                }
            }
            NGINX_CONF

            sudo nginx -t
            sudo systemctl reload nginx

            echo "=== Requesting SSL certificates ==="
            sudo certbot --nginx -d bbd-grad-program-2025.online -d www.bbd-grad-program-2025.online \
              --non-interactive --agree-tos -m admin@bbd-grad-program-2025.online

  deploy-api:
    name: Build & Deploy to EC2
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Parameters
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSM Parameters + TF Outputs
        run: |
          echo "POSTGRES_USER=$(aws ssm get-parameter --name '/db_config/db_username' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "POSTGRES_PASS=$(aws ssm get-parameter --name '/db_config/db_password' --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          RAW_DB_HOST="${{ needs.terraform.outputs.dbhost }}"
          CLEAN_DB_HOST=$(echo "$RAW_DB_HOST" | cut -d':' -f1)
          echo "POSTGRES_HOST=$CLEAN_DB_HOST" >> $GITHUB_ENV
          EC2_HOST="${{ needs.terraform.outputs.ec2host }}"
          echo "API_HOST=$EC2_HOST" >> $GITHUB_ENV

      - name: Install Root Dependencies
        run: npm install

      - name: Build Root App
        run: npm run build

      - name: Create Deployment Package
        run: |
          mkdir -p ../build-server
          cp -r ./dist ../build-server/
          cp ./package.json ./package-lock.json ../build-server/
          tar -czf ../deploy.tar.gz -C .. build-server
          ls -la ../build-server
          rm -rf ../build-server

      - name: Copy Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "deploy.tar.gz"
          target: "/home/ec2-user/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.ec2host }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: POSTGRES_USER,POSTGRES_PASS,POSTGRES_HOST,API_HOST
          port: 22
          script: |
            set -e
            DEPLOY_DIR="/home/ec2-user/case-supplier-app"
            PACKAGE="/home/ec2-user/deploy.tar.gz"
            rm -rf $DEPLOY_DIR
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            tar -xzf $PACKAGE
            rm -f $PACKAGE
            cd build-server
            npm i
            cat <<EOF > dist/.env
            DB_USER=$POSTGRES_USER
            DB_PASSWORD=$POSTGRES_PASS
            DB_HOST=$POSTGRES_HOST
            DB_NAME=casesupplierdb
            DB_PORT=5432
            ENV=production
            API_PORT=3000
            API_HOST=$API_HOST
            BANK_API_URL=https://commercial-bank-api.subspace.site/api
            THOH_API_URL=https://ec2-13-244-65-62.af-south-1.compute.amazonaws.com/
            RAW_MATERIALS_API_URL=https://ec2-13-244-65-62.af-south-1.compute.amazonaws.com/
            BULK_LOGISTICS_API_URL=https://team7-todo.xyz/api
            PICKUP_QUEUE_URL=https://sqs.af-south-1.amazonaws.com/263883060207/pickup-queue.fifo
            BANK_PAYMENT_URL=https://bbd-grad-program-2025.online/api/payment
            EOF
            pm2 stop case-supplier-app || true
            pm2 delete case-supplier-app || true
            pm2 start server.js --name "case-supplier-app" --cwd dist
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
